-- lua/monava/utils/init.lua
-- Common utility functions.

local M = {}

-- Import sub-modules.
M.fs = require("monava.utils.fs")
M.cache = require("monava.utils.cache")
M.glob = require("monava.utils.glob")
M.async = require("monava.utils.async")

-- String utilities.
function M.starts_with(str, prefix)
  return str:sub(1, #prefix) == prefix
end

function M.ends_with(str, suffix)
  return str:sub(-#suffix) == suffix
end

function M.trim(str)
  return str:match("^%s*(.-)%s*$")
end

-- Table utilities.
function M.table_contains(table, value)
  for _, v in ipairs(table) do
    if v == value then
      return true
    end
  end
  return false
end

function M.table_merge(target, source)
  for k, v in pairs(source) do
    target[k] = v
  end
  return target
end

function M.table_keys(table)
  local keys = {}
  for k, _ in pairs(table) do
    table.insert(keys, k)
  end
  return keys
end

-- Path utilities.
function M.path_join(...)
  local parts = { ... }
  local path = table.concat(parts, "/")
  -- Normalize path separators and remove duplicate slashes.
  path = path:gsub("//+", "/")
  return path
end

function M.path_relative(path, base)
  base = base or vim.fn.getcwd()
  -- Ensure both paths are absolute.
  if not M.starts_with(path, "/") then
    path = M.path_join(base, path)
  end
  if not M.starts_with(base, "/") then
    base = vim.fn.fnamemodify(base, ":p")
  end

  -- Remove trailing slashes.
  base = base:gsub("/$", "")
  path = path:gsub("/$", "")

  if M.starts_with(path, base .. "/") then
    return path:sub(#base + 2)
  elseif path == base then
    return "."
  else
    return path
  end
end

function M.path_dirname(path)
  return vim.fn.fnamemodify(path, ":h")
end

function M.path_basename(path)
  return vim.fn.fnamemodify(path, ":t")
end

-- JSON utilities with size limits and validation.
function M.parse_json(content, max_size)
  if type(content) ~= "string" then
    return nil, "Content must be a string"
  end

  max_size = max_size or 1024 * 1024 -- 1MB default limit
  if #content > max_size then
    return nil, "JSON content too large: " .. #content .. " bytes (max: " .. max_size .. ")"
  end

  -- Basic validation. to prevent malformed JSON from causing issues.
  if not content:match("^%s*[{%[]") then
    return nil, "Invalid JSON: must start with { or ["
  end

  local ok, result = pcall(vim.json.decode, content)
  if ok then
    return result
  else
    return nil, "JSON parse error: " .. tostring(result)
  end
end

function M.encode_json(data, max_depth)
  if data == nil then
    return nil, "Cannot encode nil value"
  end

  max_depth = max_depth or 50

  -- Simple depth check to prevent infinite recursion.
  local function check_depth(obj, depth)
    if depth > max_depth then
      return false
    end
    if type(obj) == "table" then
      for _, v in pairs(obj) do
        if not check_depth(v, depth + 1) then
          return false
        end
      end
    end
    return true
  end

  if not check_depth(data, 1) then
    return nil, "Data structure too deep (max depth: " .. max_depth .. ")"
  end

  local ok, result = pcall(vim.json.encode, data)
  if ok then
    return result
  else
    return nil, "JSON encode error: " .. tostring(result)
  end
end

-- Secure async utilities with allowlist validation and proper escaping.
function M.run_async(cmd, callback, opts)
  opts = opts or {}
  local timeout = math.min(opts.timeout or 30000, 120000) -- Cap at 2 minutes

  -- Validate inputs.
  if type(cmd) ~= "table" or #cmd == 0 then
    if callback then
      callback(-1, "", "Invalid command: must be non-empty table")
    end
    return nil
  end

  if type(callback) ~= "function" then
    error("Callback must be a function")
  end

  -- Security: Define allowed commands to prevent arbitrary command execution.
  local ALLOWED_COMMANDS = {
    "git",
    "npm",
    "yarn",
    "pnpm",
    "cargo",
    "node",
    "rustc",
    -- Add more as needed, but keep minimal for security.
  }

  -- Validate base command against allowlist.
  local base_command = cmd[1]
  if type(base_command) ~= "string" or base_command == "" then
    if callback then
      callback(-1, "", "Invalid base command: must be non-empty string")
    end
    return nil
  end

  -- Security check: Only allow whitelisted commands.
  local command_allowed = false
  for _, allowed_cmd in ipairs(ALLOWED_COMMANDS) do
    if base_command == allowed_cmd or base_command:match("/" .. allowed_cmd .. "$") then
      command_allowed = true
      break
    end
  end

  if not command_allowed then
    if callback then
      callback(-1, "", "Command not allowed for security reasons: " .. base_command)
    end
    return nil
  end

  -- Security: Validate and sanitize all command arguments.
  local clean_cmd = {}
  for i, arg in ipairs(cmd) do
    if type(arg) == "string" then
      -- Basic validation.: no control characters or dangerous sequences.
      if
        arg:find("[\0-\31]")
        or arg:find("&&")
        or arg:find("||")
        or arg:find(">>")
        or arg:find("<<")
      then
        if callback then
          callback(-1, "", "Command argument contains dangerous characters: " .. arg)
        end
        return nil
      end
      table.insert(clean_cmd, arg)
    elseif type(arg) == "number" then
      table.insert(clean_cmd, tostring(arg))
    else
      -- Only allow strings and numbers as arguments.
      if callback then
        callback(-1, "", "Invalid argument type: " .. type(arg))
      end
      return nil
    end
  end

  if #clean_cmd == 0 then
    if callback then
      callback(-1, "", "No valid command arguments after validation")
    end
    return nil
  end

  local stdout = vim.loop.new_pipe(false)
  local stderr = vim.loop.new_pipe(false)
  local handle
  local timer
  local finished = false

  local stdout_data = {}
  local stderr_data = {}

  local function cleanup()
    if finished then
      return
    end
    finished = true

    if timer then
      timer:stop()
      timer:close()
    end

    if stdout and not stdout:is_closing() then
      stdout:close()
    end
    if stderr and not stderr:is_closing() then
      stderr:close()
    end
    if handle and not handle:is_closing() then
      handle:kill("sigterm")
      handle:close()
    end
  end

  -- Set up timeout.
  timer = vim.loop.new_timer()
  timer:start(timeout, 0, function()
    cleanup()
    vim.schedule(function()
      callback(-1, "", "Command timed out after " .. timeout .. "ms")
    end)
  end)

  handle = vim.loop.spawn(clean_cmd[1], {
    args = vim.list_slice(clean_cmd, 2),
    stdio = { nil, stdout, stderr },
  }, function(code, signal)
    cleanup()

    vim.schedule(function()
      callback(code, table.concat(stdout_data), table.concat(stderr_data))
    end)
  end)

  if not handle then
    cleanup()
    if callback then
      callback(-1, "", "Failed to spawn command")
    end
    return nil
  end

  stdout:read_start(function(err, data)
    if err then
      -- Handle read errors gracefully.
      return
    end
    if data then
      table.insert(stdout_data, data)
    end
  end)

  stderr:read_start(function(err, data)
    if err then
      -- Handle read errors gracefully.
      return
    end
    if data then
      table.insert(stderr_data, data)
    end
  end)

  return {
    handle = handle,
    cancel = cleanup,
  }
end

-- Debounce function for performance.
function M.debounce(func, delay)
  local timer = nil
  return function(...)
    local args = { ... }
    if timer then
      timer:stop()
      timer:close()
    end
    timer = vim.loop.new_timer()
    timer:start(delay, 0, function()
      timer:close()
      timer = nil
      vim.schedule(function()
        func(unpack(args))
      end)
    end)
  end
end

-- YAML parsing utility for PNPM workspace files.
function M.parse_pnpm_workspace_yaml(content)
  if type(content) ~= "string" then
    return nil, "Content must be a string"
  end

  -- Basic validation.
  if #content == 0 then
    return nil, "Empty YAML content"
  end

  -- Simple YAML parser specifically for pnpm-workspace.yaml format.
  -- Expected format:
  -- packages:
  --   - "packages/*"
  --   - "apps/*"
  local packages = {}
  local in_packages = false

  for line in content:gmatch("[^\r\n]+") do
    local trimmed = M.trim(line)

    -- Skip comments and empty lines.
    if trimmed == "" or trimmed:match("^#") then
      goto continue
    end

    -- Check for packages section.
    if trimmed:match("^packages%s*:") then
      in_packages = true
      goto continue
    end

    -- If we're in packages section, parse array items.
    if in_packages then
      -- Check for array item (starts with -).
      local pattern = trimmed:match("^%-%s*[\"']?([^\"']+)[\"']?%s*$")
      if pattern then
        table.insert(packages, pattern)
      else
        -- If we hit a non-array item and we have packages, we're done.
        if #packages > 0 and not trimmed:match("^%s*$") then
          break
        end
      end
    end

    ::continue::
  end

  if #packages == 0 then
    return nil, "No packages found in YAML"
  end

  return { packages = packages }
end

-- Glob pattern matching utility for workspace patterns.
function M.glob_match(pattern, path)
  return M.glob.glob_match(pattern, path)
end

-- Expand glob patterns to find matching directories with resource exhaustion protection.
function M.expand_glob_pattern(root_path, pattern, options)
  return M.glob.expand_glob_pattern(root_path, pattern, options)
end

-- Error handling utilities
function M.safe_call(func, ...)
  local ok, result = pcall(func, ...)
  if ok then
    return result
  else
    vim.notify("[monava] Error: " .. tostring(result), vim.log.levels.ERROR)
    return nil
  end
end

-- Logging utilities
function M.log(level, message, ...)
  if type(message) == "string" and select("#", ...) > 0 then
    message = string.format(message, ...)
  end
  vim.notify("[monava] " .. tostring(message), level)
end

function M.debug(message, ...)
  if vim.g.monava_debug then
    M.log(vim.log.levels.DEBUG, message, ...)
  end
end

function M.info(message, ...)
  M.log(vim.log.levels.INFO, message, ...)
end

function M.warn(message, ...)
  M.log(vim.log.levels.WARN, message, ...)
end

function M.error(message, ...)
  M.log(vim.log.levels.ERROR, message, ...)
end

return M
