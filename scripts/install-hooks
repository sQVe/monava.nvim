#!/usr/bin/env bash

set -euo pipefail

# Variables
SCRIPT_NAME="$(basename "${0}")"
PROJECT_ROOT="$(cd "$(dirname "${0}")/.." && pwd)"
GIT_HOOKS_DIR="${PROJECT_ROOT}/.git/hooks"
PRE_COMMIT_HOOK="${GIT_HOOKS_DIR}/pre-commit"

# Functions
print_help() {
	cat <<EOF
${SCRIPT_NAME} - Install git pre-commit hooks for monava.nvim

USAGE:
    ${SCRIPT_NAME} [OPTIONS]

OPTIONS:
    -h, --help      Show this help message
    -f, --force     Force installation (overwrite existing hooks)

DESCRIPTION:
    This script installs pre-commit hooks that will:
    - Format Lua files with stylua
    - Format shell scripts with shfmt
    - Run basic linting checks
    - Prevent commits if formatting or linting fails

REQUIREMENTS:
    - Git repository
    - stylua (install with: cargo install stylua)
    - shfmt (install with: go install mvdan.cc/sh/v3/cmd/shfmt@latest)

EOF
}

print_error() {
	echo "Error: ${1}" >&2
}

print_info() {
	echo "Info: ${1}"
}

validate_dependencies() {
	if [[ ! -d "${PROJECT_ROOT}/.git" ]]; then
		print_error "Not in a git repository. Please run this script from the project root."
		exit 1
	fi

	if ! command -v git >/dev/null 2>&1; then
		print_error "git command not found."
		exit 1
	fi
}

install_pre_commit_hook() {
	local force="${1:-false}"

	if [[ -f "${PRE_COMMIT_HOOK}" && "${force}" != "true" ]]; then
		print_error "Pre-commit hook already exists. Use --force to overwrite."
		exit 1
	fi

	mkdir -p "${GIT_HOOKS_DIR}"

	cat >"${PRE_COMMIT_HOOK}" <<'EOF'
#!/usr/bin/env bash

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Functions
print_error() {
  echo -e "${RED}Error: ${1}${NC}" >&2
}

print_success() {
  echo -e "${GREEN}${1}${NC}"
}

print_warning() {
  echo -e "${YELLOW}Warning: ${1}${NC}"
}

# Get list of staged files
staged_files=$(git diff --cached --name-only --diff-filter=ACM)

# Arrays to hold files by type
lua_files=()
shell_files=()

# Categorize staged files
while IFS= read -r file; do
  if [[ -f "$file" ]]; then
    case "$file" in
      *.lua)
        lua_files+=("$file")
        ;;
      *.sh|scripts/*)
        if [[ "$file" == scripts/* ]] || [[ "$file" == *.sh ]]; then
          shell_files+=("$file")
        fi
        ;;
    esac
  fi
done <<< "$staged_files"

# Check if we have any files to process
if [[ ${#lua_files[@]} -eq 0 && ${#shell_files[@]} -eq 0 ]]; then
  print_success "No Lua or shell files to check."
  exit 0
fi

echo "üîç Running pre-commit checks..."

# Flag to track if any checks failed
checks_failed=false

# Format Lua files with stylua
if [[ ${#lua_files[@]} -gt 0 ]]; then
  echo "üìù Formatting Lua files..."
  
  if command -v stylua >/dev/null 2>&1; then
    if stylua --check "${lua_files[@]}"; then
      print_success "‚úÖ Lua files are properly formatted"
    else
      print_error "‚ùå Lua files need formatting. Run: stylua ${lua_files[*]}"
      checks_failed=true
    fi
  else
    print_warning "‚ö†Ô∏è  stylua not found. Install with: cargo install stylua"
  fi
fi

# Format shell files with shfmt
if [[ ${#shell_files[@]} -gt 0 ]]; then
  echo "üìù Formatting shell files..."
  
  if command -v shfmt >/dev/null 2>&1; then
    if shfmt -d "${shell_files[@]}"; then
      print_success "‚úÖ Shell files are properly formatted"
    else
      print_error "‚ùå Shell files need formatting. Run: shfmt -w ${shell_files[*]}"
      checks_failed=true
    fi
  else
    print_warning "‚ö†Ô∏è  shfmt not found. Install with: go install mvdan.cc/sh/v3/cmd/shfmt@latest"
  fi
fi

# Run luacheck if available
if [[ ${#lua_files[@]} -gt 0 ]] && command -v luacheck >/dev/null 2>&1; then
  echo "üîç Running luacheck..."
  
  if luacheck "${lua_files[@]}"; then
    print_success "‚úÖ Lua files passed linting"
  else
    print_error "‚ùå Lua files failed linting"
    checks_failed=true
  fi
fi

# Summary
if [[ "$checks_failed" == "true" ]]; then
  print_error "‚ùå Pre-commit checks failed. Please fix the issues above."
  echo ""
  echo "üí° Quick fixes:"
  echo "   - Format Lua files: stylua lua/ tests/"
  echo "   - Format shell files: shfmt -w scripts/"
  echo "   - Check linting: luacheck lua/ tests/"
  echo ""
  exit 1
else
  print_success "‚úÖ All pre-commit checks passed!"
  exit 0
fi
EOF

	chmod +x "${PRE_COMMIT_HOOK}"
	print_success "Pre-commit hook installed successfully!"
}

# Parse command line arguments
FORCE="false"

while [[ $# -gt 0 ]]; do
	case "${1}" in
	-h | --help)
		print_help
		exit 0
		;;
	-f | --force)
		FORCE="true"
		shift
		;;
	*)
		print_error "Unknown option: ${1}"
		echo "Use --help for usage information."
		exit 1
		;;
	esac
done

# Main execution
main() {
	validate_dependencies
	install_pre_commit_hook "${FORCE}"

	echo ""
	print_info "Pre-commit hooks have been installed!"
	print_info "The hooks will run automatically before each commit."
	print_info ""
	print_info "To test the hooks manually, run:"
	print_info "  git add <files> && git commit --dry-run"
	print_info ""
	print_info "Required tools for full functionality:"
	print_info "  - stylua: cargo install stylua"
	print_info "  - shfmt: go install mvdan.cc/sh/v3/cmd/shfmt@latest"
	print_info "  - luacheck: luarocks install luacheck"
}

# Execute main function
main "$@"
