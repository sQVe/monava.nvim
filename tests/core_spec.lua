local helpers = require("tests.helpers")

describe("core", function()
  local core

  before_each(function()
    package.loaded["monava.core"] = nil
    core = require("monava.core")
  end)

  after_each(function()
    helpers.fs_rm()
  end)

  describe("detect_monorepo_type", function()
    it("should detect Lerna monorepos", function()
      local workspace = helpers.fs_create({
        ["lerna.json"] = '{"version": "0.0.0", "packages": ["packages/*"]}',
        ["package.json"] = '{"name": "root", "private": true}',
        ["packages/pkg1/package.json"] = '{"name": "pkg1"}',
        ["packages/pkg2/package.json"] = '{"name": "pkg2"}',
      })

      local monorepo_type = core.detect_monorepo_type(workspace)
      assert.are.equal("lerna", monorepo_type)
    end)

    it("should detect Nx monorepos", function()
      local workspace = helpers.fs_create({
        ["nx.json"] = '{"npmScope": "company"}',
        ["workspace.json"] = '{"projects": {"app1": "apps/app1"}}',
        ["package.json"] = '{"name": "nx-workspace"}',
        ["apps/app1/project.json"] = '{"name": "app1"}',
      })

      local monorepo_type = core.detect_monorepo_type(workspace)
      assert.are.equal("nx", monorepo_type)
    end)

    it("should detect Yarn workspaces", function()
      local workspace = helpers.fs_create({
        ["package.json"] = '{"name": "root", "workspaces": ["packages/*"]}',
        ["yarn.lock"] = "# yarn lockfile v1",
        ["packages/pkg1/package.json"] = '{"name": "@company/pkg1"}',
      })

      local monorepo_type = core.detect_monorepo_type(workspace)
      assert.are.equal("yarn_workspaces", monorepo_type)
    end)

    it("should detect npm workspaces", function()
      local workspace = helpers.fs_create({
        ["package.json"] = '{"name": "root", "workspaces": ["packages/*"]}',
        ["package-lock.json"] = '{"lockfileVersion": 2}',
        ["packages/pkg1/package.json"] = '{"name": "pkg1"}',
      })

      local monorepo_type = core.detect_monorepo_type(workspace)
      assert.are.equal("npm_workspaces", monorepo_type)
    end)

    it("should detect Cargo workspaces", function()
      local workspace = helpers.fs_create({
        ["Cargo.toml"] = '[workspace]\nmembers = ["crates/*"]',
        ["Cargo.lock"] = "# This file is automatically generated",
        ["crates/lib1/Cargo.toml"] = '[package]\nname = "lib1"',
      })

      local monorepo_type = core.detect_monorepo_type(workspace)
      assert.are.equal("cargo_workspace", monorepo_type)
    end)

    it("should return nil for non-monorepo directories", function()
      local workspace = helpers.fs_create({
        ["package.json"] = '{"name": "single-project"}',
        ["src/index.js"] = 'console.log("hello");',
      })

      local monorepo_type = core.detect_monorepo_type(workspace)
      assert.is_nil(monorepo_type)
    end)

    it("should handle empty directories", function()
      local workspace = helpers.fs_create({})

      local monorepo_type = core.detect_monorepo_type(workspace)
      assert.is_nil(monorepo_type)
    end)
  end)

  describe("enumerate_packages", function()
    local test_workspace

    before_each(function()
      test_workspace = helpers.fs_create({
        ["package.json"] = '{"name": "root", "workspaces": ["packages/*"]}',
        ["packages/ui/package.json"] = '{"name": "@company/ui", "version": "1.0.0"}',
        ["packages/utils/package.json"] = '{"name": "@company/utils", "version": "2.1.0"}',
        ["packages/api/package.json"] = '{"name": "@company/api", "version": "1.5.0"}',
        ["apps/web/package.json"] = '{"name": "web-app", "version": "0.1.0"}',
      })
    end)

    it("should enumerate all packages in a monorepo", function()
      local packages = core.enumerate_packages(test_workspace)

      assert.is.table(packages)
      assert.is_true(#packages >= 4)

      for _, pkg in ipairs(packages) do
        helpers.assert_has_keys(pkg, { "name", "path", "type" })
        assert.is.string(pkg.name)
        assert.is.string(pkg.path)
        assert.are.equal("javascript", pkg.type)
      end
    end)

    it("should include package metadata when requested", function()
      local packages = core.enumerate_packages(test_workspace, { include_metadata = true })

      for _, pkg in ipairs(packages) do
        if pkg.name == "@company/ui" then
          assert.are.equal("1.0.0", pkg.version)
          assert.is_false(pkg.private or false)
        end
      end
    end)

    it("should filter by package type", function()
      -- Add non-JS packages
      helpers.fs_create({
        ["rust-crate/Cargo.toml"] = '[package]\nname = "rust-crate"',
        ["go-module/go.mod"] = "module go-module",
      })

      local js_packages = core.enumerate_packages(test_workspace, { type = "javascript" })

      assert.is_true(#js_packages >= 4)

      for _, pkg in ipairs(js_packages) do
        assert.are.equal("javascript", pkg.type)
      end
    end)

    it("should respect package limits", function()
      local limited_packages = core.enumerate_packages(test_workspace, { limit = 2 })

      assert.is.table(limited_packages)
      assert.is_true(#limited_packages <= 2)
    end)

    it("should handle missing package files gracefully", function()
      helpers.fs_create({
        ["broken/package.json"] = "invalid json {",
        ["empty/package.json"] = "",
      })

      local packages = core.enumerate_packages(test_workspace)

      assert.is.table(packages)
      assert.is_true(#packages >= 4)
    end)
  end)

  describe("get_current_package", function()
    local mock_workspace

    before_each(function()
      mock_workspace = helpers.fs_create({
        ["package.json"] = '{"name": "root"}',
        ["packages/ui/package.json"] = '{"name": "@company/ui"}',
        ["packages/ui/src/Button.tsx"] = "export const Button = () => {};",
        ["packages/api/package.json"] = '{"name": "@company/api"}',
        ["packages/api/routes/users.js"] = "module.exports = router;",
      })
    end)

    it("should detect current package from file path", function()
      local ui_file = helpers.path("packages/ui/src/Button.tsx")
      local current_pkg = core.get_current_package(ui_file, mock_workspace)

      assert.is.table(current_pkg)
      assert.are.equal("@company/ui", current_pkg.name)
      assert.is_true(current_pkg.path:match("packages/ui"))
    end)

    it("should return nil for root-level files", function()
      local root_file = helpers.path("package.json")
      local current_pkg = core.get_current_package(root_file, mock_workspace)

      assert.is_nil(current_pkg)
    end)

    it("should handle files outside workspace", function()
      local outside_file = "/tmp/other/file.js"
      local current_pkg = core.get_current_package(outside_file, mock_workspace)

      assert.is_nil(current_pkg)
    end)
  end)

  describe("analyze_monorepo", function()
    local complex_monorepo

    before_each(function()
      complex_monorepo = helpers.fs_create({
        ["package.json"] = '{"name": "monorepo-root", "workspaces": ["packages/*"]}',
        ["lerna.json"] = '{"version": "independent"}',
        ["packages/ui/package.json"] = '{"name": "@company/ui"}',
        ["packages/api/package.json"] = '{"name": "@company/api"}',
        ["rust-services/auth/Cargo.toml"] = '[package]\nname = "auth-service"',
        ["go-tools/cli/go.mod"] = "module company.com/cli",
      })
    end)

    it("should analyze monorepo structure", function()
      local analysis = core.analyze_monorepo(complex_monorepo)

      assert.is.table(analysis)
      helpers.assert_has_keys(analysis, {
        "type",
        "packages",
        "languages",
        "tools",
        "stats",
      })

      assert.are.equal("lerna", analysis.type)
      assert.is.table(analysis.packages)
      assert.is.table(analysis.languages)
      assert.is.table(analysis.stats)
    end)

    it("should detect multiple languages", function()
      local analysis = core.analyze_monorepo(complex_monorepo)

      local languages = analysis.languages
      assert.is_true(languages.javascript > 0)
      assert.is_true(languages.rust > 0)
      assert.is_true(languages.go > 0)
    end)

    it("should provide package statistics", function()
      local analysis = core.analyze_monorepo(complex_monorepo)

      local stats = analysis.stats
      helpers.assert_has_keys(stats, {
        "total_packages",
        "by_language",
        "by_type",
      })

      assert.is.number(stats.total_packages)
      assert.is_true(stats.total_packages >= 4)
      assert.is.table(stats.by_language)
      assert.is.table(stats.by_type)
    end)
  end)

  describe("performance", function()
    it("should handle large workspaces efficiently", function()
      local large_workspace = {}
      large_workspace["package.json"] = '{"name": "large", "workspaces": ["packages/*"]}'

      for i = 1, 50 do
        large_workspace["packages/pkg" .. i .. "/package.json"] = '{"name": "pkg' .. i .. '"}'
      end

      local workspace = helpers.fs_create(large_workspace)

      local start_time = vim.loop.hrtime()
      local packages = core.enumerate_packages(workspace)
      local end_time = vim.loop.hrtime()

      assert.is.table(packages)
      assert.is_true(#packages >= 50)

      local duration_ms = (end_time - start_time) / 1000000
      assert.is_true(
        duration_ms < 1000,
        "Large workspace enumeration took too long: " .. duration_ms .. "ms"
      )
    end)

    it("should cache detection results", function()
      local workspace = helpers.fs_create({
        ["package.json"] = '{"name": "root", "workspaces": ["packages/*"]}',
        ["packages/pkg1/package.json"] = '{"name": "pkg1"}',
      })

      local start_time = vim.loop.hrtime()
      local type1 = core.detect_monorepo_type(workspace)
      local end_time = vim.loop.hrtime()
      local first_duration = end_time - start_time

      start_time = vim.loop.hrtime()
      local type2 = core.detect_monorepo_type(workspace)
      end_time = vim.loop.hrtime()
      local second_duration = end_time - start_time

      assert.are.equal(type1, type2)
      assert.is_true(second_duration < first_duration / 2)
    end)
  end)
end)
